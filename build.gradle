buildscript {

	ext {
		kotlinVersion = '1.3.72'
		springBootVersion = '2.3.0.RELEASE'
		cxfVersion = '3.3.7'
		oidcTokenSupportVersion = '0.2.9'
		logstashLogbackVersion = '6.3'
		pensjonInformasjonVersion = '9.4.10'
	}
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("gradle.plugin.org.openrepose:gradle-jaxb-plugin:2.5.0")
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.28.0'
	id 'se.patrikerdes.use-latest-versions' version '0.2.13'
	id "org.owasp.dependencycheck" version "5.3.2.1"
	id "org.sonarqube" version "2.8"
	id 'jacoco'
	id 'com.adarshr.test-logger' version '2.0.0'
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openrepose.gradle.plugins.jaxb'

group = 'no.nav.eessi.pensjon'
version = '0.0.1-SNAPSHOT'

configurations {
	xsd
}

dependencies {

	// Spring-boot
	implementation("org.springframework.boot:spring-boot-starter-aop")

	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-actuator")

	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
		exclude module: "mockito-core"
		exclude module: "junit-vintage-engine"
	}
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testCompileOnly('junit:junit:4.12') {
		because "spring-kafka-test needs it - but we should not use it in our code"
	}

	// Apache CXF
	implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}") {
		exclude module: 'spring-boot-starter-web'
	}
	// Forced version due to RCE error in Apache CXF above ( Snyk ): spring-boot-starter-web 2.1.15.RELEASE spring-boot-starter-web, legger til spring-boot-starter-web 2.3.2.RELEASE
	implementation("org.springframework.boot:spring-boot-starter-web:2.3.2.RELEASE")

	implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
	implementation("commons-io:commons-io:2.6")

	implementation("org.apache.httpcomponents:httpclient:4.5.12")

	// Allows for variable expiration-date of each cache-entry
	implementation("net.jodah:expiringmap:0.5.9")

	//mock - test
	testImplementation("org.mockito:mockito-core:3.3.3")
	testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
	testImplementation("org.jetbrains.kotlin:kotlin-test:${kotlinVersion}") {
		exclude module: 'kotlin-test-js'
		exclude module: 'kotlin-test-testng'
	}
	testImplementation("org.mock-server:mockserver-netty:5.10") {
		exclude module: 'junit'
	}
	testImplementation("org.mock-server:mockserver-client-java:5.10")
	testImplementation("io.mockk:mockk:1.10.2")

	// Architecture tests
	testImplementation 'com.tngtech.archunit:archunit:0.13.1'

	// Micrometer
	implementation("io.micrometer:micrometer-registry-prometheus")

	// Eessi pensjon biblioteker
	implementation("no.nav.eessi.pensjon:ep-metrics:0.4.0")
	implementation("no.nav.eessi.pensjon:ep-logging:0.0.17")
	implementation("no.nav.eessi.pensjon:ep-security-sts:0.0.10")

	// Personoppslag
	implementation("no.nav.eessi.pensjon:ep-personoppslag:7.0.4")
	implementation("no.nav.tjenestespesifikasjoner:person-v3-tjenestespesifikasjon:1+")
	implementation("com.sun.xml.ws:jaxws-ri:2.3.3")

	// PDF box
	implementation("org.apache.pdfbox:pdfbox-tools:2.0.13")
	implementation("com.twelvemonkeys.imageio:imageio-jpeg:3.1.1")
	implementation("com.twelvemonkeys.imageio:imageio-tiff:3.1.1")

	// Logging
	implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
	configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
	implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

}

test {
	useJUnitPlatform()
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "11"
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '11'
	}
}

repositories {
	mavenCentral()

	["maven-release","tjenestespesifikasjoner","ep-metrics", "ep-security-sts"].each { repo ->
		String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
		if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
		maven {
			url = uri("https://maven.pkg.github.com/navikt/$repo")
			credentials {
				username = "token"
				password = token
			}
		}
	}
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

tasks.sonarqube.dependsOn jacocoTestReport

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
	rejectVersionIf {
		['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
				.any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
	}
	revision = 'release'
}


