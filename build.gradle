buildscript {

	ext {
		kotlinVersion = '1.6.10'
		springBootVersion = '2.6.5'
		cxfVersion = '3.5.1'
		oidcTokenSupportVersion = '2.0.14'
		logstashLogbackVersion = '7.0.1'
		pensjonInformasjonVersion = '9.4.10'
		mockserverVersion = '5.13.0'
		epMetricsVersion = '0.4.16'
		epLoggingVersion = '1.0.16'
		epPersonoppslagVersion = '9.0.9'
		epEuxVersion = '1.1.64'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("gradle.plugin.org.openrepose:gradle-jaxb-plugin:2.5.0")
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.42.0'
	id 'se.patrikerdes.use-latest-versions' version '0.2.18'
	id "org.owasp.dependencycheck" version "7.0.1"
	id 'com.adarshr.test-logger' version '3.2.0'
	id "org.sonarqube" version "3.3"
	id 'jacoco'
	id "org.springframework.boot" version "$springBootVersion"
	id "io.spring.dependency-management" version "1.0.11.RELEASE"
	id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
	id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
	id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

group = 'no.nav.eessi.pensjon'

configurations {
	xsd
}

dependencies {

	// Spring-boot
	implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	implementation("org.apache.httpcomponents:httpclient:4.5.13")


	implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-actuator:${springBootVersion}")

	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.2'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.2'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.springframework.kafka:spring-kafka:2.8.4'
    testImplementation('org.springframework.boot:spring-boot-starter-test:2.6.5') {
		exclude module: 'junit'
		exclude module: "mockito-core"
		exclude module: "junit-vintage-engine"
	}
	testImplementation 'org.springframework.kafka:spring-kafka-test:2.8.4'

	//mock - test
	testImplementation("org.jetbrains.kotlin:kotlin-test:${kotlinVersion}") {
		exclude module: 'kotlin-test-js'
		exclude module: 'kotlin-test-testng'
	}
	testImplementation("org.mock-server:mockserver-netty:${mockserverVersion}") {
		exclude module: 'junit'
	}
	testImplementation("org.mock-server:mockserver-client-java:${mockserverVersion}")
	testImplementation("io.mockk:mockk:1.12.3")
	testImplementation("com.ninja-squad:springmockk:3.1.1")

	// Architecture tests
	testImplementation 'com.tngtech.archunit:archunit:0.23.1'

	// Micrometer
	implementation("io.micrometer:micrometer-registry-prometheus:1.8.4")

	// Eessi pensjon biblioteker
	implementation("no.nav.eessi.pensjon:ep-metrics:${epMetricsVersion}")
	implementation("no.nav.eessi.pensjon:ep-logging:${epLoggingVersion}")
	implementation("no.nav.eessi.pensjon:ep-personoppslag:${epPersonoppslagVersion}")
	// Rina Eux API
	implementation("no.nav.eessi.pensjon:ep-eux:${epEuxVersion}") {
		exclude module: 'ep-security-sts'
	}
	// PDF box
	implementation("org.apache.pdfbox:pdfbox-tools:2.0.25")
	implementation("com.twelvemonkeys.imageio:imageio-jpeg:3.8.2")
	implementation("com.twelvemonkeys.imageio:imageio-tiff:3.8.2")

	// Logging
	implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
	configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
	implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

	//Auth
	//Auth
	implementation("no.nav.security:token-client-spring:${oidcTokenSupportVersion}")
	implementation("no.nav.security:token-validation-spring:${oidcTokenSupportVersion}")
	implementation("no.nav.security:token-validation-jaxrs:${oidcTokenSupportVersion}")
	implementation("no.nav.security:token-validation-test-support:2.0.5")

}

test {
	useJUnitPlatform()
	filter {
		//exclude all tests from a package.
		excludeTestsMatching "no.nav.eessi.pensjon.integrasjonstest.*"
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "11"
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '11'
	}
}

repositories {
	mavenCentral()

	String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
	if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")

	maven {
		url = uri("https://maven.pkg.github.com/navikt/maven-release")
		credentials {
			username = "token"
			password = token
		}
	}
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}


jacocoTestReport {
	reports {
		xml.enabled true
	}
}

sonarqube {
	properties {
		property 'sonar.host.url', 'http://localhost:9000'
	}
}
tasks.sonarqube.dependsOn tasks["jacocoTestReport"]


dependencyUpdates {
	rejectVersionIf {
		['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'pr']
				.any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
	}
	revision = 'release'
}


